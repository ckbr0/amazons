import sys
import platform
from pathlib import Path
import pickle
import subprocess

import ninja_syntax
from compiler import CompilerFlags, Compiler

# Base paths
projectdir = Path.cwd()
sourcedir = Path(projectdir, 'source')
tmpdir = Path(projectdir, 'tmp')
bindir = Path(projectdir, 'bin')

# Host
host_platform = platform.system().lower()
host_arch = platform.machine()

# Target
target_platform = sys.argv[1]
target_configuration = sys.argv[2]
target_name = sys.argv[3]

# Build dirs
builddir = tmpdir / target_platform / target_configuration
ninja_file = builddir / 'build.ninja'
outdir = bindir / target_platform

target_files = sorted(sourcedir.glob('**/*.target.py'))

import inspect

class Builder():
    def __init__(self, platform, configuration):
        self.__platform = platform
        self.__configuration = configuration
        self.__targets = {}
    
    @property
    def platform(self):
        return self.__platform

    @property
    def configuration(self):
        return self.__configuration

    def target(self, name, defines=[], includes=[], cflags=[], ldflags=[]):
        self.__targets[name] = Target(name, defines, includes, cflags, ldflags, self)
        return self.__targets[name]
    
    @property
    def targets(self):
        return self.__targets

class Target(CompilerFlags):
    def __init__(self, name, defines : list, includes : list, cflags : list, ldflags : list, builder : Builder):
        super().__init__(cflags, ldflags)
        self.__name = name
        self.__modules = {}
        self.__builder = builder
        #self.__launcher_module = None
        #self.__game_module = None

    @property
    def name(self):
        return self.__name

    @property
    def modules(self):
        return self.__modules

    def module(self, name, type='default', defines=[], includes=[], cflags=[], ldflags=[], libs=[], deps=[]):
        assert not name in self.__modules, "Module %s already exists" % name
        self.__modules[name] = Module(name, type, defines, includes, cflags, ldflags, libs, deps)
        #if type == 'launcher':
        #    self.__launcher_module = self.__modules[name]
        #elif type == 'game':
        #    self.__game_module = self.__modules[name]
        return self.__modules[name]

    def module_directories(self, dirs):
        for d in dirs:
            module_file = sourcedir / Path(d) / Path(d + '.module.py')
            exec(module_file.open().read(), {'bld' : self.__builder, self.__name : self})

class Module(CompilerFlags):
    def __init__(self, name : str, type : str, defines : list, includes : list, cflags : list, ldflags : list, libs : list, deps : list):
        super().__init__(cflags, ldflags)
        self.__name = name
        self.__libs = libs
        self.__type = type
        self.__deps = deps
        self.__unity_file_name = self.__name + '.unity.cpp'
        self.__ignore_files

        if type == 'launcher':
            self.__bin_file_name = self.__name
            self.__object_file_name = self.__name + '.unity.o'
        else:
            self.ldflags = '-shared'
            self.__bin_file_name = 'lib' + self.__name + '.so'
            self.__object_file_name = self.__name + '.unity.o'

    @property
    def name(self):
        return self.__name
    
    @property
    def unity_file_name(self):
        return self.__unity_file_name

    @property
    def object_file_name(self):
        return self.__object_file_name
    
    @property
    def bin_file_name(self):
        return self.__bin_file_name
    
    @property
    def deps(self):
        return self.__deps
    
    @property
    def libs(self):
        return self.__libs

    @property
    def ignore_files(self):
        return self.__ignore_files

    @property
    def type(self):
        return self.__type

    @type.setter
    def type(self, type):
        self.__type = type

builder = Builder(target_platform, target_configuration)
for target_file in target_files:
    builder.__target_path = target_file.parent
    exec(target_file.open().read(), {'bld' : builder})

target_to_build = builder.targets[target_name]
modules_to_build = target_to_build.modules

compiler = Compiler(host_platform, host_arch, target_platform, target_configuration)

builddir.mkdir(parents=True, exist_ok=True)
ninja_writer = ninja_syntax.Writer(ninja_file.open('w'))
n = ninja_writer

n.variable('ninja_required_version', '1.9')
n.newline()

n.variable('root', '.')
n.variable('builddir', builddir.relative_to(projectdir))
n.variable('bindir', outdir.relative_to(projectdir))

n.variable('cxx', compiler.get_cxx())
n.variable('ar', compiler.get_ar())
n.variable('cflags', ' '.join(target_to_build.cflags))
n.variable('ldflags', ' '.join(target_to_build.ldflags))

n.newline()

cxx_rule = compiler.get_compile_rule()
n.rule('cxx',
        command=cxx_rule['command'],
        depfile=cxx_rule['depfile'],
        deps=cxx_rule['deps'],
        description=cxx_rule['description'])
n.newline()
link_rule = compiler.get_link_rule()
n.rule('link',
        command=link_rule['command'],
        description=link_rule['description'])
n.newline()
n.rule('unity',
        command='python3 -B $root/source/buildtools/unity.py linux $in $out', 
        description='UNITY $out',
        restat=True)
"""
n.rule('runner',
        command='python3 -B $root/source/buildtools/runner.py $in $module $out',
        description='RUNNER $out')
"""
n.newline()
n.comment('Modules')

for module in modules_to_build.values():
    n.newline()
    n.comment(module.name)
    n.build(f'$builddir/' + module.unity_file_name,
            'unity',
            inputs='$root/source/' + module.name)
    n.build('$builddir/' + module.object_file_name,
            'cxx',
            inputs='$builddir/' + module.unity_file_name,
            variables={'cflags' : '$cflags ' + ' '.join(module.cflags)})

    output_prefix = compiler.get_output_prefix(module.type)
    output_name = target_to_build.name if module.type == 'launcher' else module.name
    output_extension = compiler.get_output_extension(module.type)
    n.build(f'$bindir/{output_prefix}{output_name}_{builder.configuration}{output_extension}',
            'link',
            inputs='$builddir/' + module.object_file_name,
            variables={'ldflags' : '$ldflags ' + ' '.join(module.ldflags),
                'libs' : ' '.join(['-l' + x for x in module.deps + module.libs])},
                implicit=' '.join(['$bindir/' + modules_to_build[x].bin_file_name for x in module.deps]))

n.newline()
n.comment('Modules')

#n.build(f'$builddir/' + 
